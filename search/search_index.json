{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue sur la documentation de Transat !","text":"<ul> <li> <p> L'application mobile </p> <p> plus d'informations</p> </li> <li> <p> Le backend </p> <p> plus d'informations</p> </li> <li> <p> Commun entre l'application et le backend</p> <p>  Sentry </p> <p> Commencer \u00e0 d\u00e9velopper sur Transat</p> </li> </ul>"},{"location":"#contribuer-a-la-documentation","title":"Contribuer \u00e0 la documentation","text":"<p>La document de Transat est \u00e9crite en Markdown, \u00e0 l'aide Mkdoc avec le th\u00e8me Material.</p>"},{"location":"#comment-contribuer","title":"Comment contribuer?","text":"<pre><code># cr\u00e9er un venv\npython3 -m venv .venv\n\n# activer le venv\nsource .venv/bin/activate\n\n# installer les d\u00e9pendances\npip install -r requirements.txt\n\n# lancer le serveur de documentation\nmkdocs serve\n</code></pre>"},{"location":"app/","title":"Application mobile Transat","text":"<p>L'application Transat est une application mobile d\u00e9velopp\u00e9e avec Expo (React Native).</p> <ul> <li>Pr\u00e9requis</li> <li>Premier lancement</li> <li>React Query et son utilisation</li> </ul>"},{"location":"app/1-prerequis/","title":"Pr\u00e9-requis","text":""},{"location":"app/1-prerequis/#environnement","title":"Environnement","text":""},{"location":"app/1-prerequis/#global","title":"Global","text":"<p>Les d\u00e9pendances n\u00e9cessaires pour le projet mobile:</p> <ul> <li>Node.js 20.x minimum</li> <li>Lefthook pour les hooks Git</li> <li>Biome pour le formatter et le linter (s'installe avec le <code>npm install</code> normalement)</li> </ul>"},{"location":"app/1-prerequis/#specifique-a-los","title":"Sp\u00e9cifique \u00e0 l'OS","text":""},{"location":"app/1-prerequis/#android","title":"Android","text":"<ul> <li>Android Studio</li> <li>Depuis Android Studio, installer au moins le SDK d'une version d'Android ainsi que les tools comme <code>adb</code></li> <li>Lancer <code>npm run android</code></li> </ul>"},{"location":"app/1-prerequis/#ios","title":"iOS","text":"<ul> <li>Xcode</li> <li>Depuis Xcode, installer les outils de d\u00e9veloppement iOS (s\u00e9lectionner au premier lancement d'Xcode)</li> <li>Lancer <code>npm run ios</code></li> </ul>"},{"location":"app/2-premier-lancement/","title":"Configuration de l'environnement et premier lancement","text":"<p>Avez vous suivi le guide de configuration d'un poste de d\u00e9veloppement pour Transat ?</p>"},{"location":"app/2-premier-lancement/#env","title":".env","text":"<p>R\u00e9cup\u00e9rez le fichier <code>.env.example</code> et renommez-le <code>.env</code>.</p> <p>Qu'est-ce qu'un fichier <code>.env</code>?</p> <p>Un fichier <code>.env</code> est un fichier qui contient des variables d'environnement (1), une par ligne. Dans l'application, ce fichier est charg\u00e9 par Expo. Il contient l'URL de l'API.</p> <ol> <li>Une variable d'environnement est une variable qui est d\u00e9finie dans l'environnement d'ex\u00e9cution du processus. Elle est accessible dans le processus via l'objet <code>process.env</code>. Voir Wikipedia pour plus d'informations.</li> </ol>"},{"location":"app/2-premier-lancement/#installer-les-dependances","title":"Installer les d\u00e9pendances","text":"<pre><code>npm install\n</code></pre>"},{"location":"app/2-premier-lancement/#lefthook","title":"Lefthook","text":"<p>Lefthook est un outil de gestion des hooks Git.</p> <p>Qu'est-ce qu'un hook Git?</p> <p>Un hook Git est un script qui est ex\u00e9cut\u00e9 automatiquement lors d'une commande Git, \u00e0 certains moments cl\u00e9s. Par exemple, il est possible de v\u00e9rifier que le code est conforme aux conventions de code avant de commiter.</p> <p>Ils sont install\u00e9s dans le dossier <code>.git/hooks</code> du projet. Pour simplifier l'installation, nous utilisons Lefthook.</p> <pre><code>lefthook install\n\n#\u00a0Sortie attendue:\n#\u00a0sync hooks: \u2714\ufe0f (pre-commit)\n</code></pre>"},{"location":"app/2-premier-lancement/#lancer-lapplication","title":"Lancer l'application","text":"<pre><code>npm run android|ios #\u00a0selon votre choix\n</code></pre> <p>Premier lancement un peu long</p> <p>La premi\u00e8re ex\u00e9cution peut prendre un peu de temps, car une build de d\u00e9veloppement sera compil\u00e9e. Vous pouvez en lire un peu plus ici.</p> <p>Vous n'aurez plus besoin de relancer cette commande, sauf si vous avez modifi\u00e9 le fichier <code>package.json</code>.</p> <p>Il suffit en effet de lancer la commande suivante pour lancer l'application:</p> <pre><code>npm run start\n</code></pre> <p>Puis d'appuyer sur <code>i</code> ou <code>a</code> pour lancer l'application sur iOS ou Android.</p>"},{"location":"app/biome/","title":"Biome","text":"<p>Biome est un linter et un formatter extr\u00eamement rapide et efficace.</p> <p>Un linteur? Un formatter?</p> <p>Un linteur est un outil qui analyse le code source pour trouver des erreurs de syntaxe, de style, ou des probl\u00e8mes de s\u00e9mantique. Un formatter est un outil qui r\u00e9organise le code source pour le rendre plus lisible, et faire en sorte qu'il n'y ait qu'une seule fa\u00e7on de faire les choses.</p>"},{"location":"app/biome/#comment-lutiliser","title":"Comment l'utiliser?","text":"<p>Biome est configur\u00e9 avec un fichier de configuration dans le projet. Il est automatiquement lanc\u00e9 lorsque vous committez votre code, si vous avez Lefthook configur\u00e9, ainsi que dans la CI c\u00f4t\u00e9 GitHub Actions.</p> <p>Heureusement, on n'est pas oblig\u00e9s d'attendre de commit pour lancer Biome: on peut l'avoir en permanence dans l'IDE !</p> <p>Plugins Biome</p> <p>VScode  IntelliJ/Webstorm  Autres IDEs </p> <p>Biome dans l'IDE</p> <p>Par exemple, si vous enfreignez une r\u00e8gle de Biome, vous verrez un message comme celui-ci dans l'IDE:</p> <p></p> <p>Ici, j'ai d\u00e9clar\u00e9 une variable avec <code>var</code> au lieu de <code>const</code> ou <code>let</code>. Biome me signale l'erreur en rouge.</p>"},{"location":"app/biome/#utilisation-dans-le-projet","title":"Utilisation dans le projet","text":"<p>Vous pouvez lancer le formatteur de Biome manuellement avec la commande suivante:</p> <pre><code>npm run format\n</code></pre> <p>Vous pouvez \u00e9galement lancer le linter de Biome avec la commande suivante:</p> <pre><code>npm run lint\n</code></pre>"},{"location":"app/biome/#avec-le-hook-lefthook","title":"Avec le hook Lefthook","text":"<p>Lorsque vous committez votre code, Biome lancera la commande suivante:</p> <pre><code>npx biome ci\n</code></pre> <p>Cette commande lancera le linter et le formatter de Biome. Si vous avez des erreurs, le commit sera refus\u00e9.</p>"},{"location":"app/react-query/","title":"React Query","text":"<p>React Query (TanStack Query) est une biblioth\u00e8que de gestion de l'\u00e9tat (state management).</p>"},{"location":"app/react-query/#comment-ca-marche","title":"Comment \u00e7a marche?","text":"<p>React Query permet de simplifier la gestion des donn\u00e9es asynchrones, concr\u00e8tement, il permet de simplifier:</p> <ul> <li>la r\u00e9cup\u00e9ration de donn\u00e9es avec les <code>Queries</code></li> <li>la cr\u00e9ation, mise \u00e0 jour, suppression de donn\u00e9es avec les <code>Mutations</code></li> </ul> <p>React Query \u00e0 l'aide d'un client commun (le <code>queryClient</code>) pour g\u00e9rer les donn\u00e9es, qui g\u00e8re le cache, les requ\u00eates, les mutations, etc. Il est stock\u00e9 dans un Contexte (avec <code>QueryClientProvider</code>) et accessible partout dans l'application.</p>"},{"location":"app/react-query/#les-queries","title":"Les Queries","text":"<p>Une <code>Query</code> est une fonction asynchrone qui r\u00e9cup\u00e8re des donn\u00e9es.</p> <p>Exemple de Query</p> <pre><code>const { data, isLoading, error } = useQuery({\n  queryKey: [\"todos\"],\n  queryFn: () =&gt; fetch(\"/api/todos\").then((res) =&gt; res.json()),\n});\n</code></pre> <p>Dans cet exemple, la <code>Query</code> est une fonction asynchrone qui r\u00e9cup\u00e8re des donn\u00e9es depuis une API. On peut observer que la <code>Query</code> est compos\u00e9e de plusieurs propri\u00e9t\u00e9s. Premi\u00e8rement, la cl\u00e9 <code>queryKey</code> est une tableau unique de cl\u00e9s pour identifier la <code>Query</code> dans le cache interne de React Query. Enfin, <code>queryFn</code> est la fonction asynchrone qui r\u00e9cup\u00e8re les donn\u00e9es en soit.</p> <p>Comme vous pouvez le voir, en seulement 3 lignes de code, on g\u00e8re:</p> <ul> <li>l'\u00e9tat de chargement (<code>isLoading</code>)</li> <li>les erreurs (<code>error</code>, il existe aussi <code>isError</code>)</li> <li>les donn\u00e9es r\u00e9cup\u00e9r\u00e9es (<code>data</code>)</li> <li>mais aussi:<ul> <li>r\u00e9essai en cas d'erreur (3 fois par d\u00e9faut)</li> <li>refetch par:<ul> <li>intervalle de temps</li> <li>focus de la page</li> <li>invalidation manuelle de la query</li> </ul> </li> </ul> </li> </ul> <p>React Query int\u00e8gre un cache, c'est-\u00e0-dire que les donn\u00e9es r\u00e9cup\u00e9r\u00e9es sont mises en cache et r\u00e9utilis\u00e9es si la m\u00eame <code>Query</code> (avec la m\u00eame <code>queryKey</code>) est appel\u00e9e \u00e0 nouveau dans un autre composant. Cependant, il n'y a aucune garantie que les appels ne soient r\u00e9alis\u00e9s qu'une seule fois. Ces appels doivent donc \u00eatre sans effet de bord (1).</p> <ol> <li>Un effet de bord (side effet en anglais, d'o\u00f9 le nom du hook useEffect) est une action qui modifie une valeur en dehors de l'environnement (scope) de la fonction appel\u00e9e. Voir Wikipedia pour plus d'informations.</li> </ol> <p>Cela permet d'\u00e9viter d'avoir des useState et des useEffect pour g\u00e9rer les donn\u00e9es.</p>"},{"location":"app/react-query/#les-mutations","title":"Les Mutations","text":"<p>Une <code>Mutation</code> est une fonction asynchrone qui cr\u00e9e, met \u00e0 jour ou supprime des donn\u00e9es (en gros, des... mutations de donn\u00e9es). Une diff\u00e9rence majeure entre les <code>Queries</code> et les <code>Mutations</code> est qu'une query est lanc\u00e9e d\u00e8s que possible, alors qu'une mutation est lanc\u00e9e manuellement (avec <code>mutate</code>).</p> <p>Exemple de mutation</p> <pre><code>const queryClient = useQueryClient();\n\nconst { mutate } = useMutation({\n  mutationFn: (newTodo) =&gt;\n    fetch(\"/api/todos\", { method: \"POST\", body: JSON.stringify(newTodo) }),\nonSuccess: () =&gt; {\n    queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n  },\n});\n</code></pre> <p>Ici, pas d'\u00e9quivalent de <code>queryKey</code> car il n'y a pas de cache pour les mutations. \u00c0 la place,</p>"},{"location":"backend/","title":"Backend Transat","text":"<p>Le backend Transat est l'unique partenaire de l'application Transat. Toutes les communications entre l'application et le reste du monde se font via le backend.</p> <p>La stack technique est la suivante:</p> <ul> <li>Framework: Fiber </li> <li>Base de donn\u00e9es: PostgreSQL </li> <li>Authentification: JWT </li> <li>Logging: Sentry </li> <li>CI/CD: GitHub Actions pour build </li> </ul>"},{"location":"backend/1-prerequis/","title":"Pr\u00e9-requis","text":"<ul> <li>Go</li> <li>Docker</li> <li>Docker Compose</li> <li>Goose (pour les migrations)</li> </ul>"},{"location":"backend/2-premier-lancement/","title":"Configuration de l'environnement et premier lancement","text":"<p>Avez vous suivi le guide de configuration d'un poste de d\u00e9veloppement pour Transat ?</p>"},{"location":"backend/2-premier-lancement/#env","title":".env","text":"<p>R\u00e9cup\u00e9rez le fichier <code>.env.example</code> et renommez-le <code>.env</code>. Ensuite, configurez les variables d'environnement. Remplacez <code>GOOGLE_TRANSLATE_API_KEY</code>, <code>OPENWEATHERMAP_API_KEY</code>, ainsi que toutes les variables li\u00e9es aux mails (<code>EMAIL_</code>) par les cl\u00e9s API fournies sur le channel \"#\u300e\ud83d\udd10\u300fresources-identifiants\", ou utilisez les v\u00f4tres.</p> <p>Votre fichier <code>.env</code> devrait ressembler \u00e0 cela:</p> <p>Exemple de fichier .env</p> <pre><code># Configuration de la base de donn\u00e9es\nDB_USER=transat\nDB_PASS=transat\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=transat\n\nDATABASE_URL=postgres://transat:transat@localhost:5432/transat\nPORT=3000\n\n# S\u00e9curit\u00e9\nJWT_SECRET=super-secret-key\n\nGOOGLE_TRANSLATE_API_KEY=abc123\n\nOPENWEATHERMAP_API_KEY=abc123\n\n# Configuration Email\nEMAIL_SENDER=transat@transat.dev\nEMAIL_HOST=transat.dev\nEMAIL_PORT=465\nEMAIL_PASSWORD=transat\n\nENV=development\n\nDATA_FOLDER=./data\n</code></pre>"},{"location":"backend/2-premier-lancement/#base-de-donnee-locale","title":"Base de donn\u00e9e locale","text":"<p>Pour ne pas d\u00e9pendre de la base de donn\u00e9es centrale (ne travaillez pas en prod\u2026), vous pouvez lancer une base de donn\u00e9es locale. Un fichier Docker Compose est disponible pour vous simplifier la t\u00e2che. L'utilisateur, le mot de passe et le nom de la base de donn\u00e9es viennent du fichier <code>.env</code>, ainsi la configuration de la base de donn\u00e9es locale est identique \u00e0 celle de la base de donn\u00e9es centrale (\u00e0 part le port/host).</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"backend/2-premier-lancement/#initialisation-et-migrations-de-la-base-de-donnees","title":"Initialisation et migrations de la base de donn\u00e9es","text":"<p>L'application utilise Goose pour les migrations. Les migrations devraient s'\u00e9x\u00e9cuter automatiquement au d\u00e9marrage de l'application.</p> <p>En apprendre plus sur les migrations.</p>"},{"location":"backend/2-premier-lancement/#premier-lancement","title":"Premier lancement","text":"<pre><code>go run .\n</code></pre>"},{"location":"backend/2-premier-lancement/#premiere-compilation","title":"Premi\u00e8re compilation","text":"<pre><code>go build .\n</code></pre>"},{"location":"backend/2-premier-lancement/#developpement","title":"D\u00e9veloppement","text":"<p>Pour d\u00e9velopper l'application, vous pouvez utiliser Air pour automatiser le rechargement de l'application lorsque vous modifiez un fichier.</p> <pre><code>#\u00a0Installer Air\ngo install github.com/air-verse/air@latest\n\nair\n</code></pre>"},{"location":"backend/auth/","title":"Authentification","text":"<p>L'authentification est g\u00e9r\u00e9e par un token JWT.</p>"},{"location":"backend/auth/#generer-un-token","title":"G\u00e9n\u00e9rer un token","text":"<p>Pour g\u00e9n\u00e9rer un token, il faut utiliser la fonction <code>GenerateJWT</code> du package <code>utils</code>.</p> <pre><code>token, err := utils.GenerateJWT(email, jwtSecret, fingerprint)\n</code></pre>"},{"location":"backend/auth/#verification-dun-token","title":"V\u00e9rification d'un token","text":"<p>Les tokens sont v\u00e9rifi\u00e9s avec le middleware <code>JWTMiddleware</code> du package <code>middlewares</code>. L'email contenu dans le token est stock\u00e9 dans le contexte de la requ\u00eate.</p> <pre><code>c.Locals(\"email\")\n</code></pre>"},{"location":"backend/i18n/","title":"Internationalisation (i18n)","text":"<p>L'application utilise go-i18n pour l'internationalisation. Elle est notamment utilis\u00e9e pour:</p> <ul> <li>les emails</li> <li>la m\u00e9t\u00e9o</li> <li>(un jour) les notifications</li> </ul>"},{"location":"backend/i18n/#utilisation","title":"Utilisation","text":"<p>L'internationalisation est g\u00e9r\u00e9e par le package <code>i18n</code>, et s'utilise avec la fonction <code>GetLocalizer</code>.</p> <pre><code>localizer := i18n.GetLocalizer(langue)\nconfig := &amp;goi18n.LocalizeConfig{\n    MessageID: \"translation_key\",\n}\n\nmessage, err := localizer.Localize(config)\n</code></pre>"},{"location":"backend/i18n/#ajouter-une-traduction","title":"Ajouter une traduction","text":"<p>Pour ajouter une traduction, il faut la rajouter dans les diff\u00e9rents fichiers TOML de traduction.</p>"},{"location":"backend/logger/","title":"Logging","text":"<p>Le logging est g\u00e9r\u00e9 par le package <code>utils</code>.</p>"},{"location":"backend/logger/#utilisation","title":"Utilisation","text":"<pre><code>utils.LogHeader(\"\ud83d\udce7 JWT Middleware\")\nutils.LogMessage(utils.LevelError, \"Invalid token\")\nutils.LogLineKeyValue(utils.LevelError, \"Error\", err)\nutils.LogFooter()\n\n// Sortie:\n// \u2554======== \ud83d\udce7 JWT Middleware ========\u2557\n// \u2551 Invalid token\n// \u2551 Error: invalid token\n// \u255a======== \ud83d\udce7 JWT Middleware ========\u255d\n</code></pre>"},{"location":"backend/migrations/","title":"Migrations de la base de donn\u00e9es","text":"<p>La base de donn\u00e9es utilis\u00e9e est PostgreSQL. Goose est utilis\u00e9 pour les migrations (c'est-\u00e0-dire les \u00e9volutions de la base de donn\u00e9es).</p>"},{"location":"backend/migrations/#quest-ce-quune-migration","title":"Qu'est-ce qu'une migration?","text":"<p>Un besoin courant avec une base de donn\u00e9es relationnelle est de modifier la structure de la base de donn\u00e9es. Par exemple, on veut ajouter une colonne \u00e0 une table, la renommer, ou encore supprimer une table. On cr\u00e9e alors une migration pour effectuer ces modifications.</p>"},{"location":"backend/migrations/#creation-dune-migration","title":"Cr\u00e9ation d'une migration","text":"<p>Un script est disponible pour cr\u00e9er une migration vide.</p> <pre><code>./scripts/create_migration.sh \"nom_de_la_migration\"\n</code></pre>"},{"location":"backend/migrations/#composition-dune-migration","title":"Composition d'une migration","text":"<p>Une migration est compos\u00e9e d'un fichier SQL.</p> <pre><code>-- +goose Up\n-- SQL in this section is executed when the migration is applied.\n\nCREATE TABLE table_name (\n    id SERIAL PRIMARY KEY,\n    ...\n);\n\n-- +goose Down\n-- SQL in this section is executed when the migration is rolled back.\nDROP TABLE IF EXISTS table_name;\n</code></pre> <p>Dans la premi\u00e8re partie, vous d\u00e9finissez les requ\u00eates SQL qui seront execut\u00e9s lors de la migration. Dans la seconde partie, vous d\u00e9finissez les requ\u00eates SQL qui seront execut\u00e9s lors du rollback (en gros revenir \u00e0 la version pr\u00e9c\u00e9dente, jamais en th\u00e9orie mais \u00e7a peut arriver en cas de probl\u00e8me).</p>"},{"location":"backend/migrations/#execution-des-migrations","title":"Ex\u00e9cution des migrations","text":"<p>Les migrations sont ex\u00e9cut\u00e9es automatiquement au d\u00e9marrage de l'application.</p>"},{"location":"backend/migrations/#faq","title":"FAQ","text":"<p>Comment appliquer une migration?</p> <p>Les migrations sont automatiquement appliqu\u00e9es lors du d\u00e9marrage de l'application. Cependant, il est quand m\u00eame possible de les appliquer manuellement.</p> <p>Adaptez les param\u00e8tres de la commande \u00e0 votre configuration: <pre><code>goose -dir db/migrations postgres \"postgres://postgres:password@host:port/transat\" up &lt;numero_de_la_migration si vous voulez appliquer une migration sp\u00e9cifique&gt;\n</code></pre></p> <p>Est-ce que je peux modifier une migration existante?</p> <p>C'est techniquement faisable, mais ce n'est pas recommand\u00e9. Il est pr\u00e9f\u00e9rable de cr\u00e9er une nouvelle migration pour les modifications. En effet, si la migration a d\u00e9j\u00e0 \u00e9t\u00e9 appliqu\u00e9e, la migration modifi\u00e9e ne sera pas appliqu\u00e9e. Le probl\u00e8me se pose surtout en production, car en dev, on peut tout remettre \u00e0 z\u00e9ro facilement.</p>"},{"location":"backend/migrations/#troubleshotting","title":"Troubleshotting","text":"<p>Si en lan\u00e7ant la commande, vous obtenez une erreur comme ceci:</p> <pre><code>$ ./scripts/create_migration.sh \"add_passid_and_courses\"\ngoose n'est pas install\u00e9. Installation en cours...\nImpossible d'installer goose automatiquement.\nVeuillez l'installer manuellement: go install github.com/pressly/goose/v3/cmd/goose@latest\n</code></pre> <ol> <li>V\u00e9rifiez que goose est bien install\u00e9 dans votre $GOPATH:</li> </ol> Linux/macOSWindows <pre><code>ls ~/go/bin\n</code></pre> <pre><code>Get-ChildItem \"$HOME\\go\\bin\"\n</code></pre> <p>Si tel est le cas, v\u00e9rifiez si votre <code>$PATH</code> contient le r\u00e9pertoire de votre <code>~/go/bin</code>\u00a0:</p> Linux/macOSWindows <pre><code>echo $PATH | sed 's/:/\\n/g' | grep ~/go/bin\n</code></pre> <pre><code>$env:PATH -split ';' | Where-Object { $_ -like \"$HOME\\go\\bin\" }\n</code></pre> <p>Si ce n'est pas le cas, ajoutez le r\u00e9pertoire \u00e0 votre <code>$PATH</code>. Temporairement:</p> Linux/macOSWindows <pre><code>export PATH=$PATH:~/go/bin\n</code></pre> <pre><code>set PATH=%PATH%;%USERPROFILE%\\go\\bin\n</code></pre> <p>Plus proprement: voir la doc de votre shell.</p>"},{"location":"backend/schema/","title":"Sch\u00e9ma de la base de donn\u00e9es","text":"<p>Le sch\u00e9ma de base de donn\u00e9es est g\u00e9r\u00e9 avec Looping, un logiciel gratuit de gestion de mod\u00e9lisation de base de donn\u00e9es. Le fichier s'appelle <code>MCD.loo</code> dans le repo du backend.</p>"},{"location":"commun/poste/","title":"Commencer \u00e0 d\u00e9velopper sur Transat","text":"<p>L'application Transat est en deux parties, le backend en Go et le mobile en React Native. Vous pouvez donc sauter directement \u00e0 la section qui vous int\u00e9resse, si vous ne souhaitez pas d\u00e9velopper sur l'int\u00e9gralit\u00e9 de l'application.</p>"},{"location":"commun/poste/#prerequis","title":"Pr\u00e9requis","text":"<p>Pour les utilisateurs sous macOS</p> <p>Il faut installer Homebrew, un gestionnaire de paquets pour macOS. Si vous ne l'avez pas d\u00e9j\u00e0, vous pouvez l'installer avec la commande suivante: <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre></p> <p>Pour les utilisateurs sous Windows</p> <p>Installez Chocolatey, un gestionnaire de paquets pour Windows. Si vous ne l'avez pas d\u00e9j\u00e0, vous pouvez l'installer. Ouvrez PowerShell en tant qu'administrateur et ex\u00e9cutez la commande suivante:</p> <pre><code>powershell -c \"irm https://community.chocolatey.org/install.ps1|iex\"\n</code></pre>"},{"location":"commun/poste/#mobile","title":"Mobile","text":""},{"location":"commun/poste/#dependances-logicielles-a-installer","title":"D\u00e9pendances logicielles \u00e0 installer","text":"<p>Tout d'abord, pour une app React Native, il faut installer Node.js.</p> Linux/macOSWindows <p>Je vous conseille d'installer nvm, un gestionnaire de version de Node.js. <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\nsource ~/.bashrc\nnvm install 22\nnvm alias default 22\nnvm use default\n</code></pre></p> <p>Sinon, vous pouvez installer Node.js avec le gestionnaire de paquets de votre distribution, ou <code>brew</code> sur macOS.</p> <p>Installez Node.js avec Chocolatey.</p> <pre><code># Download and install Node.js\nchoco install nodejs-lts --version=\"22\"\n\n# Verify the Node.js version\nnode -v # Should print \"v22.16.0\".\n\n# Verify npm version\nnpm -v # Should print \"10.9.2\".\n</code></pre>"},{"location":"commun/poste/#cloner-le-repo","title":"Cloner le repo","text":"<p>Clonez le repo de l'application: <pre><code>git clone https://github.com/plugimt/transat-app.git\ncd transat-app\n</code></pre></p> <p>Voir la page Configuration de l'environnement et premier lancement pour continuer</p>"},{"location":"commun/poste/#backend","title":"Backend","text":"Linux/macOSWindows"},{"location":"commun/poste/#go","title":"Go","text":"<p>Installez Go avec le gestionnaire de paquets de votre distribution.</p> <p>Sous macOS, vous pouvez installer Go avec <code>brew</code>:</p> <pre><code>brew install go\n</code></pre>"},{"location":"commun/poste/#docker","title":"Docker","text":"<p>Sous Linux, installez Docker avec le gestionnaire de paquets de votre distribution.</p> <p>Sous macOS, installez Docker Desktop avec brew:</p> <pre><code>brew install --cask docker\n</code></pre>"},{"location":"commun/poste/#go_1","title":"Go","text":"<p>Installez Go avec Chocolatey.</p> <pre><code># Download and install Go\nchoco install go --version=\"1.23.4\"\n\n# Verify the Go version (should print \"go version go1.23.4 windows/amd64\")\ngo version\n</code></pre>"},{"location":"commun/poste/#docker_1","title":"Docker","text":"<p>Installez Docker Desktop avec Chocolatey:</p> <pre><code>choco install docker-desktop\n</code></pre>"},{"location":"commun/poste/#postgresql","title":"PostgreSQL","text":"<p>Il n'est pas n\u00e9cessaire d'installer PostgreSQL nativement sur votre machine, la base de donn\u00e9es est d\u00e9ploy\u00e9e par Docker.</p>"},{"location":"commun/poste/#configurer-le-projet","title":"Configurer le projet","text":"<pre><code>git clone https://github.com/plugimt/transat-backend.git\ncd transat-backend/\n</code></pre> <p>Voir la page Configuration de l'environnement et premier lancement</p>"},{"location":"commun/sentry/","title":"Sentry","text":"<p>L'application utilise Sentry pour la gestion des erreurs, avec l'int\u00e9gration de Sentry pour Fiber sur le backend et Sentry pour React Native sur l'application mobile.</p> <p>Sentry nous sponsorise une offre gratuite, nous les remercions chaleureusement ! </p> <p>Il est n\u00e9cessaire d'\u00eatre ajout\u00e9 \u00e0 l'organisation GitHub PlugImt pour pouvoir acc\u00e9der \u00e0 Sentry.</p> <p>Connexion </p>"},{"location":"commun/sentry/#liens-utiles","title":"Liens utiles","text":"<p>Logs  Errors  Traces  Session replay </p>"},{"location":"commun/sentry/#backend","title":"Backend","text":""},{"location":"commun/sentry/#configuration","title":"Configuration","text":"<p>La configuration de Sentry se fait dans le fichier <code>sentry.go</code>, dans le package <code>utils</code>. Sentry est d\u00e9sactiv\u00e9 en d\u00e9veloppement.</p>"},{"location":"commun/sentry/#logging","title":"Logging","text":"<p>Les logs sont envoy\u00e9s \u00e0 Sentry, via le logger d'<code>utils</code>.</p>"},{"location":"commun/sentry/#application-mobile","title":"Application mobile","text":"<p>La configuration de Sentry se fait dans le fichier <code>_layout.tsx</code> racine de toute l'application.</p>"}]}